-----------------------------------------------------------
FreeRTOS
-----------------------------------------------------------

[https://www.freertos.org/Documentation/01-FreeRTOS-quick-start/01-Beginners-guide/01-RTOS-fundamentals]

-RTOS-
rtos (real time operating systems) are small and suitable for
constrained hardware. free RTOS supports multitasking. On a
single core many tasks can be run and are managed by the kernels
fixed-priority, preemptive scheluling policy with round robin
for equal priority tasks. ESP32s have 2 cores, so we can attach
tasks to cores and have them be run simultaneously and part of
their own respective scheduling. there is a heap and for memory
management malloc and free will work but more specific
calls will allow for better control over memory see pvPortMalloc()

-Queues-
allows messaging between tasks. FIFO, with ability to send to back
or to the front. Data is copied into the queue, not a reference
to the data. although the queue could be made to hold references.
simple and flexible. the kernel is responsible for sizing these
queues. Variable sized messages can be sent via a queue holding
structs of a pointer to the data and size of data. same can be
done with data of differing type.
Reading from an empty queue will place the task in  a blocked state,
until available or block time expires.
If two tasks are dependend on the queue, and in a blocked state,
the first to be unblocked will be the higher priority.

-Binary Semaphore-
kind of like a queue that can only hold one item.
good for implementing sync between tasks.
a task can attempt to "take" the semaphore. if the semaphore is
not available the task will enter the blocked state for a desired
number of clock ticks. if more then one task is waiting for the same
semaphore, the task with highest priority will be given the semaphore
once it is available.
implementing synchronization between tasks or an interupt is easy with
a semaphore. you have task (A) which only ever attempts to "take" while
the interupt only ever "gives" the semaphore. this way, when (A) is
done processing it winds back in a Block state and waits there for the
semaphore to become available. xSemaphoreGiveISR()
also RTOS Task Notifications cam be a lighter weight alternative
(basically tasks have an array of notifications that can be waited on)

-Counting Semaphore-
basically just a number, that you can "give" to add; "take" to subtract
good for resource management; counting events;

-Mutexes-
mutex (mutual exclusion)
mutexes make sure only one task is accessing a shared resource at a time.
similar to a semaphore, tasks attempting to access a mutex that is being
used will be put in a blocked state. Importante NOTE: when a low priority
task has ownership of the mutex and a higher priorit task atempts to
take it, the lower priority task will have its priority temporarily raised
to that of the high priority task. apparently this makes the high prio task
have the shortest wait time. (this does not cure priority inversion, but
minimizes it)
keep in mind -> a task can have its priority raised more if it has multiple
mutexes in ownership
a task remains the highest priority while it owns the mutex.
(recursive mutexes allow multiple takes, and require multiple gives)
